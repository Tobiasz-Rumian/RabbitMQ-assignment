plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'application'
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}
allprojects {

    repositories {
        mavenCentral()
    }

}
bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
        application {
            switch (project.args) {
                case "Car":
                    mainClassName = 'com.example.car.CarApplication'
                    applicationDefaultJvmArgs = ['-Drun.arguments="--server.port=8081"']
                    break
                case "Logger":
                    mainClassName = 'com.example.logger.LoggerApplication'
                    applicationDefaultJvmArgs = ['-Drun.arguments="--server.port=8082"']
                    break
            }
        }
        println(project.args.toString())
    }
}

jar {
    enabled = true
}
subprojects {
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '14'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'idea'
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation project('logger')
    implementation project('car')
    implementation project('driver')
    implementation project('engineer')
    implementation project('teamleader')
    implementation project('monitor')
}

